plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	// for convert adoc file, copy to build directory
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.jdh'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	// asciidoctor 확장 기능 사용
	asciidoctorExtensions
}

repositories {
	mavenCentral()
}

ext {
	// 테스트 실행 시 생성되는 응답을 저장할 디렉토리
	snippetsDir = file('build/generated-snippets')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// log4jdbc
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

	// spring restdocs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	// asciidoctor (configurations에서 지정한 의존 설정 사용)
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

tasks.named('test') {
	// 테스트 시 snippetsDir 경로에 생성된 응답을 asciidoctor로 변환하여 adoc 파일 생성
	outputs.dir snippetsDir
	useJUnitPlatform()
}

// asciidoctor를 사용하기 위하여 asciidoctor task에 asciidoctorExtensions 설정
tasks.named('asciidoctor') {
	configurations "asciidoctorExtensions"
	inputs.dir snippetsDir
	dependsOn test
}

// asciidoctor task 실행시 생성된 html 파일을 src/main/resources/static/docs 디렉토리에 카피
tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("${asciidoctor.outputDir}")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument  // 빌드 전 copyDocument task 실행
}

bootJar {
	dependsOn copyDocument    // bootJar 실행 전 copyDocument task 실행
	from ("${asciidoctor.outputDir}") {  // bootJar에 asciidoctor task에서 생성된 html 파일 추가
		into 'BOOT-INF/classes/static/docs'     // bootJar에 추가될 경로
	}
}

// active profile default를 dev로 지정
ext.profile = (!project.hasProperty('profile') || !profile) ? 'dev' : profile

// 리소스 폴더 지정
sourceSets {
	main {
		resources {
			srcDirs "src/main/resources", "src/main/resources-${profile}"
		}
	}
}

tasks {
	processResources {
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
	}
}